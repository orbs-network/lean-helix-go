package main

import (
	"encoding/hex"
	"fmt"
	"github.com/orbs-network/lean-helix-go/spec/types/go/protocol"
	"github.com/orbs-network/orbs-network-go/crypto/digest"
)

func main() {

	// Uncomment to paste an existing byte array of a block proof
	//proof, _ := hex.DecodeString("4000000000000000e0c8100003000000369e0200000000000000000000000000200000007ad9e32dba0bda156099ebe57e4cca67b432615034fdfd1a10f821dc747a0fe3e50300005d000000140000008a44e9c662dcf0677d529ef3b000f29a8f741b604100000056e08461787c12cff3d7f7533b99ed243cc95117280a6ecd0824962d6d3cba08127f1ad0bd4b74efd2193f45842671b8198a9766b1d02e39f4d5c7d7f082a57e000000005d00000014000000d78869ba2436abfa639724c6ff8cf1a7b451cdb541000000e73f9f28d020a18c24b8a194def37985d7fa67b2e6297332b78e1a815674869066239db855f703aa905c73dd754ce1d307601a11cdfe0fc8cfd709659dde2ff1000000005d00000014000000718d4317e8d75f6494da9c8f7abb0554f58fafe4410000000d66ca6f3638592b51261d5a8d9655a16c4e06e381a2c7fa57bdcd88c8cca8a325423ba6bba264fd7dfc4999dfc58b84feb4a278170fbf9cb50ac65a3c8f7461010000005d0000001400000071cbe6f119d99c6cd5c1ec0ec59678f36f1fed8541000000064820baace9517675f1f5d52e481049b899b221115fe747907db8b679e80aab1984f596c8ee199298f9132ffb00b71890e99a1cd32d2b86ee8e322c4a6cc607000000005d0000001400000074a53750cb23b14b8e256f777a2df9f4a57984db41000000376f54eca80a8b06d02eb5f98baeeb4f8fe2bd3d65de8defca9268d4498da39d7396ac953826f22da4a1f07d5b5d67a550113b550986d01747818cd47d1d9ee7000000005d000000140000007ab403de6f3ed5d203932dd3dd5d0d5d86c66301410000002a41c09c0d5434896d30fd4e75b9ba5dc4ba6b2c3f63ab5cf3661b07b27647d006f91256c24d5246eac7fce35cb65d5682283aeefe2bbe05f734f36bbe0b497a010000005d00000014000000f19bafe71844282a88776f87496328de1965899241000000a75e186cbff133dfc578bc15b734b244e67655a5de6241084dbb7c38f88753246d03bbada488d2302ee4d8ecc26b33b0bbb45a8c352213a6d7e1991f150c176a000000005d00000014000000461280f795b1151fcefc6b3f551f8e8218ca289e41000000d565cebd0d4e395ceeea95e1fd16eb2d0c88029decc0afe0d16de76f9b1e18b66d392bcab08ac6217aee0bfb603bc3012cd8d7a6094dabd43b785bccc4ccb3a2000000005d00000014000000f2d94675d9a10085feb499359fcd42a2dc16d62b41000000f278181f70f0faf3a84d67f60648655be7b78c94faa8950c8136fb2a7a0a2816272f7cdaef74099bf8adc0a73df2264241e4c57c13357bb7cb453de9c8d2f82d000000005d00000014000000e30a30069209aa4e7e7b07ab391966a0f071afd9410000004374da21998343e84543a20fd8c30c79b6178fd3ce4aa82d43e9a7788f7db2976d07d43f8def63a870fb3f1b904d1595b110368d75b8db0f61c3b30739ac88710000000020000000a2dea9d6cb330dc57431aa55209652a76c8a5c8e4ba7f45cf2c840912e59662e")
	//proof, _ := hex.DecodeString("4000000000000000e0c81000030000004f9e020000000000010000000000000020000000bab7d9881847963b78f9e6f20553a6dae2231f1aba5656da3e78846885250e47e50300005d00000014000000e30a30069209aa4e7e7b07ab391966a0f071afd9410000000f319fbfc598ef899d5d36cf7a708c7f6e19321e30c552a1f5ff1dc684a8c33b0d3fef805f2a64f24382efaa634bcf4afa0f01afc9c0fb72513e6586812fc42c000000005d0000001400000074a53750cb23b14b8e256f777a2df9f4a57984db410000001a184174d70e06a8784971fac9c335e57ebe66b4251f5ac5e10343c1302bb61d661f220c26b26d0c055dd8694b48f02287f8cb714bd624e6823ed97cadbe6313010000005d00000014000000d78869ba2436abfa639724c6ff8cf1a7b451cdb541000000b9f31cf426a5e36858b85e9ee312f6b6b92265bf27543abddc861544fc15c831608d6aa5b68c3830f6f1fbdce44cc87ba763599e55c635ebef2d4278c6a51b76010000005d00000014000000461280f795b1151fcefc6b3f551f8e8218ca289e41000000bbca4dc61489c12f919d6aa7a197e0c94bed7900c687c73b880c851b72a132031d258dc9ccfde16078c2805742ec8ae3be5d5d30db4e9fe566984f66e426159c010000005d00000014000000f2d94675d9a10085feb499359fcd42a2dc16d62b410000003a2f5ad6049015a8ac9e47689985ef95acf1d023eadc3e3f37da265972fd5d680bcd0fdc2eb0a81d0b6aa3b5087c775f0de4a091df7eeba223c3ebcdd7cecb7d010000005d0000001400000071cbe6f119d99c6cd5c1ec0ec59678f36f1fed8541000000117b9860850b4829398997595966fd591e19bd072652899b88f1d0d0051de9703ee4c373feb609c71fca19cc36011e9d72278744dda3c02edfc8dd50df156591010000005d000000140000007ab403de6f3ed5d203932dd3dd5d0d5d86c6630141000000f9af0a115bbbb3ad7f65bd20a484b66948eff8799119aac5968c83c65dfc32ab72f88ae48eb5ca36c6af1ff9b7277e0086e315614cac250c68ed22f572b13f70010000005d000000140000008a44e9c662dcf0677d529ef3b000f29a8f741b60410000001c6a1fc5e9bc02252617191e5720b0edb4717b0df0390cae125ade6b70e9ba725b072274d6dd1b2818a1e82335d19dfa081cc3df71196fc02742d3dfb8c1b709010000005d00000014000000f19bafe71844282a88776f87496328de19658992410000001e76a1bda9500eeff2b8f3156adaffbfc97232dd2289b96fe0254210f63c5a4235ba8f9f1bbf9a01b615c9a24f1a95365d33025c8938082f6ea4848ae0773a36000000005d00000014000000718d4317e8d75f6494da9c8f7abb0554f58fafe441000000c4412040cc0a2baa8c28fc97574ba8991a35f9273c39c1bf769b96b470fc6f726652a6e43f962f15281729f43f3809bd6dc0741da3b9a887d144eac4d2de805d0100000020000000cd43da763ee34f3e5323a397f5325a60012a6f71f11d7124b9ff961f51867b55")

	proof := buildProof()
	deserializeBlockProof(proof)
}

// This proof doesn't need to be correct, it is just an example of building a proof object
// Modify this as you wish
func buildProof() []byte {
	blockHash, _ := hex.DecodeString("7ad9e32dba0bda156099ebe57e4cca67b432615034fdfd1a10f821dc747a0fe3")
	randomSeed, _ := hex.DecodeString("8000A000B000")

	memberId1, _ := hex.DecodeString("112233445566778899AABBCCDDEEFF0011223344")
	sig1, _ := hex.DecodeString("1a1b1c1d1e1f42309752309847590387459387245934659873465983765983765893765983476593847563928457634985673948576934857632495876342985700")

	blockRefBuilder := &protocol.BlockRefBuilder{
		MessageType: protocol.LEAN_HELIX_COMMIT,
		InstanceId:  0x10c8e000000000,
		BlockHeight: 0x29e36,
		View:        0,
		BlockHash:   blockHash,
	}

	senderSigBuilder := &protocol.SenderSignatureBuilder{
		MemberId:  memberId1,
		Signature: sig1,
	}

	proofBuilder := &protocol.BlockProofBuilder{
		BlockRef:            blockRefBuilder,
		Nodes:               []*protocol.SenderSignatureBuilder{senderSigBuilder},
		RandomSeedSignature: randomSeed,
	}
	return proofBuilder.Build().Raw()
}

// Small app that parses a block proof
func deserializeBlockProof(blockProofBytes []byte) {
	blockProof := protocol.BlockProofReader(blockProofBytes)
	blockRefFromProof := blockProof.BlockRef()
	sendersIterator := blockProof.NodesIterator()
	//committeeMembers := make([]primitives.MemberId, 0)
	fmt.Printf("Input len: %d\nParsed Proof: %+v\n", len(blockProofBytes), blockProof)

	var sn int
	for {
		if !sendersIterator.HasNext() {
			break
		}
		sender := sendersIterator.NextNodes()
		fmt.Printf("Sender #%d Member ID: %s\n", sn, sender.MemberId())
		content := blockRefFromProof.Raw()
		sig := []byte(sender.Signature())
		fmt.Printf("Sender #%d Signature: %x\n", sn, sig)
		err := digest.VerifyNodeSignature([]byte(sender.MemberId()), content, sig)
		if err != nil {
			fmt.Printf("Sender #%d Error: %s\n", sn, err)
		} else {
			fmt.Printf("Sender #%d OK\n", sn)
		}
		sn++
		//if err := proofsvalidator.VerifyBlockRefMessage(blockRefFromProof, sender, lh.config.KeyManager); err != nil {
		//	fmt.Printf("%s", err)
		//}
	}
}
